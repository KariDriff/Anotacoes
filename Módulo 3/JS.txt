</> = Espaço de preenchimento
*   = Opcional

var </> = </>*;                  | Cria uma variável global.                                                                    || Nome, Valor.
let </> = </>*;                  | Cria uma variável local.                                                                     || Nome, Valor.
const </> = </>*;                | Cria uma constante (matemática?).                                                            || Nome, Valor.

Tipos de variáveis:
Primitivos: Number, String e Boolean. Compostos: Object, Array e Function. Outros: Empty, Null e Undefined.

</>* </> = {</>: </>};           | Transforma uma variável em um objeto.                                                        || Tipo, Nome, Propriedade, Valor.
——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
function </>(</>*) {}            | Cria uma função que executará o código entre {}.                                             || Nome, Parâmetro.
(function(</>*) {})();           | Expressão de Função de Invocação Imediata.                                                   || Parâmetro.
</> </> = (</>*) => {</>}        | É uma function de seta.                                                                      || Tipo, Nome, Parâmetro, Função.
for (</>; </>; </>) {}           | Repete o código entre {} até a condição (2º espaço de peenchimento) ser falsa.               || Variável Local, Condição, Função enquanto Condição for falsa.
for (</>* </> in </>) {}         | Repete o código entre {} a partir de uma propriedade.                                        || Tipo, Propriedade, Variável.
for (</>* </> of </>) {}         | Repete o código entre {} a partir de um valor.                                               || Tipo, Valor, Variável.
while (</>) {}                   | Repete o código entre {} enquanto a condição for verdadeira.                                 || Condição.
do {</>} while (</>);            | Repete o código entre {} enquanto a condição em while for verdadeira.                        || Função caso Condição for falsa, Condição.
throw </>;                       | Cria uma mensagem de erro.                                                                   || Mensagem.
try {</>} catch(e) {</>}         | Cria uma mensagem de erro manipulável.                                                       || Código caso funcionar, Códido caso der erro.
try {} catch() {} finally {</>}  | Executa o código entre chaves mesmo tendo uma mensagem de erro ou não.                       || Código que executará indepenentemente.
async </>                        | Define uma função assíncrona.                                                                || Function.
await </>                        | Permite o resto do código funcionar quando a async estiver resolvida.                        || Código caso async resolver.
fetch(</>)                       | Retorna uma promise.                                                                         || Promise.
class </> {}                     | Cria uma classe.                                                                             || Nome.
contructor(</>) {}               | Relacionado a classe, cria os parâmetros da classe.                                          || Parâmetros.
get </>(</>*) {}                 | Relacionado a classe, "pega" um parâmetro.                                                   || Parâmetro da classe, Variável.
set </>(</>*) {}                 | Relacionado a classe, define o parâmetro.                                                    || Parâmetro da classe, Variável.
class </> extends </> {}         | Cria uma subclasse de outra classe.                                                          || Nome da subclasse, Nome da classe pai.
super(</>);                      | Um método importante para fazer "heranças" de classes.                                       || Parâmetros.
——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
console.log(</>);                | Faz o código entre () aparecer no terminal.                                                  || Mensagem/Variável/etc..
console.clear();                 | Limpa o terminal. 
clear();                         | Mesma coisa.
——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
</>.forEach(</> {});             | Adiciona uma função para cada elemento de um Array.                                          || Array, Elemento.
</>.push(</>);                   | Adiciona um elemento no final de um Array.                                                   || Array, Novo elemento.
</>.unshift(</>);                | Adiciona um elemento no começo de um Array.                                                  || Array, Novo elemento.
</>.pop();                       | Remove um elemento do final de um Array.                                                     || Array.
</>.shift();                     | Remove um elemento do começo de um Array.                                                    || Array.
</>.indexOf(</>);                | Diz o índice de um elemento específico de um Array.                                          || Array/variável, elemento.
</>.splice(</>, </>, </>);       | Remove ou substitui um elemento de um Array de acordo com o índice especificado.             || Array, Posição, Substituir(1/0), Palavra/letra/número.
</>.slice(</>);                  | Cria outro Array com os elementos de outro Array.                                            || Array, Nº do elemento.
</>.reverse();                   | Inverte a ordem dos itens de um Array.                                                       || Array.
</>.every(item => item === </>); | Checa se todos os itens de um Array é igual a palavra/letra/número especificado.             || Array, Palavra/letra/número.
</>.some(item => item === </>);  | Checa se algum item de um Array é igual a palavra/letra/número especificado.                 || Array, Palavra/letra/número.
</>.concat(</>);                 | Concatena uma variável com outra variável.                                                   || Variável/objeto/array 1, Variável/objeto/array 2.
</>.split(</>);                  | "Divide" uma variável, motrando cada letra/número.                                           || Variável 1, Variável 2.
</>.includes(</>);               | Mostra, com true ou false, se uma variável possui uma determinada palavra/letra/número.      || Variável/array, Palavra/letra/número.
</>.startsWith(</>);             | Mostra, com true ou false, se uma variável começa com uma determinada palavra/letra/número.  || Variável/array, Palavra, letra, número.
</>.endsWith(</>);               | Mostra, com true ou false, se uma variável termina com uma determinada palavra/letra/número. || Variável/array, Palavra/letra/número.
</>.replace(</>, </>);           | Modifica uma variável, substituindo algo por outra coisa.                                    || Variável/array, Elemento, Palavra/letra/número.
</>.toString(</>*);              | Transforma uma variável não-String em uma String.                                            || Variável/array/objeto 1, ?.
</>.call(</>);                   | Relacionado ao this, este chama o valor de this de um objeto.                                || Function, This's.
</>.apply(</>);                  | Relacionado ao this, é a mesma coisa que o call, exceto que ele retorna valores como arrays. || Function, This's.
</>.bind(</>);                   | Relacionado ao this, clona uma função em uma variável.                                       || Function, This's.
</>.addEventListener("</>", </>) | Cria um evento em uma variável.                                                              || Variável, Tipo do evento, Function.
this.</>;                        | Retorna a propriedade que vem após o ponto.                                                  || Propriedade.
Object.values(</>);              | Mostra todos os valores de um objeto.                                                        || Object.
Math.floor(</>);                 | "Arredonda" o resultado de uma variável "para baixo".                                        || Número.
Math.ceil(</>);                  | "Arredonda" o resultado de uma variável "para cima".                                         || Número.
——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
alert("</>");                    | Cria um alerta com a mensagem especificada.                                                  || Mensagem.
prompt("</>");                   | Cria um alerta com uma caixa de texto para inserção.                                         || Mensagem.
——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
`${</>} </>`;                    | Cria uma mensagem de texto colocando o valor de uma var, const, etc..                        || Variável/array/objeto, Mensagem.
——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
Promise example:

const myP = new Promise((resolve, reject) => {
 window.setTimeout(() => {
  resolve(console.log("</>"));
 }, </>);
});